geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},1000,10,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},100,10,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},100,10,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},100,10,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},100,10,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},100,10,10)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x+y))},100,10,10)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x+y))},100,10,10)
geneticSpecies(function(x,y){return(x^2+y^2)},100,10,10)
geneticSpecies(function(x,y){return(x^2+y^2)},100,10,10)
geneticSpecies(function(x,y){return(x^2+y^2)},100,10,10)
geneticSpecies(function(x,y){return(x^2+y^2)},100,100,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},100,100,10)
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time",creation = "new")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time",creation = "new")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "time",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},1,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},1,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},1,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},10,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,10,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,10,10,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,10,10,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,10,10,plot = "time",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,10,10,plot = "time",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,10,10,plot = "time",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,1,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,0,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,0,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,0,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},20,0,10,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},200,0,5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},200,10,5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 10,indivs = 5,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 10,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
,
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 10,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 10,indivs = 5,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "maxVals",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "time",creation = "new")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 200,gens = 100,indivs = 5,plot = "time",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 20,gens = 100,indivs = 5,plot = "time",creation = "new")
?optim
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 1,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+ sin(x-y))},species = 1,gens = 10000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},species = 1,gens = 10000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2+y^2+1)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 10,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(x^2-y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+y^2)},species = 2,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+y^2)},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+y^2)},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+y)},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+y)},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+cos(y)},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+cos(y))},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x^2)+cos(y^2))},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 5,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 10,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 10,gens = 1000,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x+y)+cos(y-x))},species = 10,gens = 1000,indivs = 2,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 1000,indivs = 2,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 1000,indivs = 2,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 1000,indivs = 2,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 1000,indivs = 2,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "time",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "time",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "time",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "time",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 20,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(y-x))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)-cos(x*y)+sin(y-x))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)-cos(x*y)+sin(y-x)+sin(x*y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)-cos(x*y)+sin(y-x)+sin(x*y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x*y)+sin(y-x)+sin(x*y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x*y)+sin(y-x)},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x*y)+sin(y-x))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x*y)},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x*y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x*y)-tan(x+y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(tan(x+y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(tan((1/100)*(x+y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(tan((1/100)*(x+y)))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(tan((1/10)*(x+y)))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y)},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(sin(x-y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},species = 40,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},species = 400,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
geneticSpecies(function(x,y){return(cos(x+y)+sin(x-y))},species = 4,gens = 100,indivs = 5,plot = "maxVals",creation = "child")
rm(list = ls())
X <- matrix(c(1,0),c(0,1))
X <- matrix(1,0,0,1
)
X
X <- matrix(c(1,0,0,1),nrow = 2)
X
Y <- matrix(c(1,4,4,1),nrow = 2)
X*Y
X %*% Y
Y <- matrix(c(2,4,4,1),nrow = 2)
X*Y
X %*% Y
tempfunc <- function(X,Y)
{}
tempfunc <- function(X,Y){start <= Sys.time(); for(i in 1:1000){X*Y} return(Sys.time()-start())}
tempfunc <- function(X,Y){start <= Sys.time(); for(i in 1:1000){X*Y} return(Sys.time()-start())}
tempfunc <- function(X,Y){start <= Sys.time(); for(i in 1:1000){X*Y} return(Sys.time()-start())}
tempfunc <- function(X,Y){start <= Sys.time(); for(i in 1:1000){X*Y}; return(Sys.time()-start())}
tempfunc(X,Y)
ce_df <- tibble(x=seq(0,8,by=0.02),y=x*sin(2*pi*x))
head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.02),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.002),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.2),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.4),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.6),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.001),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
ce_df <- tibble(x=seq(0,8,by=0.2),y=x*sin(2*pi*x))
#head(ce_df)
ce_df %>% ggplot(mapping = aes(x=x,y=y)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
rm(list = ls())
head(gapminder)
library(gapminder)
head(gapminder)
filter(gapminder, country = "Italy")
filter(gapminder, country == "Italy")
italy <- filter(gapminder, country == "Italy")
italy %>% ggplot(mapping = aes(x=year,y=pop)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
gapminder %>% ggplot(mapping = aes(x=year,y=pop)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
gapminder %>% ggplot(mapping = aes(x=year,y=log10(pop)) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
)
gapminder %>% ggplot(mapping = aes(x=year,y=log10(pop))) + geom_point(color="red") +
stat_smooth(method = "lm",color="blue",lwd=1)
summary(italy)
lm(pop~year,data = italy)
italyLM <- lm(pop~year, data = italy)
summary(italyLM)
italyLM <- lm(pop~year, data = gapminder(filter, country = "United States"))
italyLM <- lm(pop~year, data = filter(gapminder, country = "United States"))
italyLM <- lm(pop~year, data = filter(gapminder, country == "United States"))
summary(italyLM)
gapminder %>% ggplot(mapping = aes(x=year,y=log10(pop))) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
gapminder %>% ggplot(mapping = aes(x=year,y=gpdPerCap) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
)
gapminder %>% ggplot(mapping = aes(x=year,y=gpdPerCap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
gapminder %>% ggplot(mapping = aes(x=year,y=gpdPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
gapminder %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "United States") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
italyLM <- lm(pop~year, data = filter(gapminder, country == "United States"))
summary(lm(pop~year, data = filter(gapminder, country == "United States")))
filter(gapminder, country == "Sweden") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
summary(lm(pop~year, data = filter(gapminder, country == "Sweden")))
filter(gapminder, country == "Afghanistan") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Kuwait") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "China") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Madigascar") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Madagascar") %>% ggplot(mapping = aes(x=year,y=gdpPercap)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Canada") %>% ggplot(mapping = aes(x=gdpPercap,y=lifeExp)) + geom_point(color="red") + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Canada") %>% ggplot(mapping = aes(x=gdpPercap,y=lifeExp)) + geom_point(color=year) + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Canada") %>% ggplot(mapping = aes(x=gdpPercap,y=lifeExp)) + geom_point(color = year) + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Canada") %>% ggplot(mapping = aes(x=gdpPercap,y=lifeExp)) + geom_point(mapping = aes(color = year)) + stat_smooth(method = "lm",color="blue",lwd=1)
filter(gapminder, country == "Canada") %>% ggplot(mapping = aes(x=gdpPercap,y=lifeExp)) + geom_point(mapping = aes(color = year)) + stat_smooth(method = "lm")
rm(list = ls())
?trace
?tr
X <- matrix(1,0,0,1, nrow=2)
X <- matrix(1,0,0,1, nrows=2)
?matrix
X <- matrix(c(1,0,0,1), nrows=2)
X <- matrix(c(1,0,0,1))
X
X <- matrix(c(1,0,0,1),ncols=2)
X <- matrix(c(1,0,0,1),cols=2)
X <- matrix(c(1,0,0,1),ncol=2)
X
X <- matrix(c(1,0,1,1),ncol=2)
X
Y <- matrix(c(1,1,0,1),ncol=2)
Y
fitfunc <- function(x){return(sum(diag(x))}
fitfunc <- function(x){return(sum(diag(x)))}
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
fitnessEval(X,5,Y,fitfunc)
library(expm)
install.packages("expm")
library(expm)
fitnessEval(X,5,Y,fitfunc)
Y %^% 5
sum(diag(Y %^% 5))
fitnessEval(colony = X, mutate = Y, fitfunc = fitfunc)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
fitnessEval(colony = X, mutate = Y, fitfunc = fitfunc)
X %*% (Y %^% 5)
X
Y
Y %^% 5
sum(Y)
sum(Y%^%5)
fitfunc <- function(x){return(sum(x))}
fitnessEval(colony = X, mutate = Y, fitfunc = fitfunc)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,0,1)
rnorm(1,1,1)
rnorm(1,1,1)
rnorm(1,1,1)
?rnorm
temp <- list(1,2,3,4,5)
temp[1]
temp[4]
temp[6] <- 6
temp
temp[8] <- 8
temp
tempfunc <- function(x,y){return(sin(x+y)-cos(x-y))}
geneticSpecies(tempfunc,10,10,10,creation = "new",plot = "maxVals")
source('~/GitHub/R-Projects/ESS/Genetic.R', echo=TRUE)
geneticSpecies(tempfunc,10,10,10,creation = "new",plot = "maxVals")
geneticSpecies(tempfunc,10,100,10,creation = "new",plot = "maxVals")
geneticSpecies(tempfunc,gens = 100,species = 100,10,creation = "new",plot = "maxVals")
geneticSpecies(tempfunc,gens = 1000,species = 10,5,creation = "new",plot = "maxVals")
rm(list = ls())
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
GetCoinHistory(coin = "ETH")
GetCoinHistory("ETH")
library(crypto)
GetCoinHistory("ETH")
library(zoo)
GetCoinHistory("ETH")
head(rollcoindata)
ggplot(data=x, mapping = aes(x = 1:length,y = open)) + geom_line()
ggplot(data=rollcoindata, mapping = aes(x = 1:length,y = open)) + geom_line()
ggplot(data=rollcoindata, mapping = aes(x = 1:length(rollcoindata[1]),y = open)) + geom_line()
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
GetCoinHistory("ETH")
plotCoin(rollcoindata)
head(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotCoin(rollcoindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
head(coindata)
mutateRoll(coindata,coindata$close,c(1,2))
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
mutateRoll(coindata,coindata$close,c(1,2))
head(coindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
head(coindata)
mutateRoll(coindata,coindata$close,c(1,2))
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
mutateRoll(coindata,coindata$close,c(1,2))
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
rm(list = ls())
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
GetCoinHistory("ETH")
plotClose(coindata)
mutateRoll(coindata,coindata$close,c(10,50))
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotClose(coindata)
head(coindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotClose(coindata)
source('~/GitHub/DataScience/FinalProj_ETH/GatherETHData.R', echo=TRUE)
plotHigh(coindata)
plotLow(coindata)
X <- data.frame(XXX = c(1,2,3,4,5))
X
XXX[-1]
X$XXX[-1]
X$XXX[-2]
X$XXX[+2]
X$XXX[2]
X$XXX[]
c(X$XXX[-1],NA)
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
mutateYesterday(X,X$XXX,"hello")
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
mutateYesterday(X,X$XXX,"hello")
?head
head(X$XXX,-1)
head(X$XXX)
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
X
mutateYesterday(X,X$XXX,yest)
mutateYesterday(X,X$XXX,"yest)
mutateYesterday(X,X$XXX,"yest")
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
mutateYesterday(X,X$XXX,"yest")
mutateTomorrow(X,X$XXX,"tomo")
mutateTomorrow(X,X$XXX,"tomor")
mutateTomorrow(X,X$XXX,"tomorro")
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
mutateTomorrow(X,X$XXX,"tomorro")
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
mutateTomorrow(X,X$XXX,"tomorro")
mutateTomorrow(mutateYesterday(X,X$XXX,"yest"),X$XXX,"tomo")
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
mutateTomorrow(mutateYesterday(X,X$XXX,"yest"),X$XXX,"tomo")
source('~/GitHub/DataScience/FinalProj_ETH/mutate.R', echo=TRUE)
plotOpen(coindata)
install.packages("crypto")
install.packages("crypto")
plotOpen(dataMA)
library(tidyverse)
library(crypto)
data <- GetCoinHistory("ETH")
dataMA <- mutateLast(dataMA,data$open,"openLast")
dataMA <- mutate(data,data$open,c(10,50))
data <- coindata
dataMA <- mutateLast(dataMA,data$open,"openLast")
dataMA <- mutate(data,data$open,c(10,50))
head(data)
dataMA <- mutateRoll(data,data$open,c(10,50))
dataMA <- mutateLast(dataMA,data$open,"openLast")
dataMA <- mutateLast(dataMA,data$close,"closeLast")
dataMA <- mutateNext(dataMA,data$open,"openNext")
dataMA <- mutateNext(dataMA,data$close,"closeNext")
plotOpen(dataMA)
plotOpen(dataMA)
plotClose(dataMA)
plotOpen(dataMA)
plotClose(dataMA)
plotHigh(dataMA)
plotLow(dataMA)
length(X)
plotOpen(dataMA)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
temp <- matrix(NA, nrow=5,ncol=4)
temp
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
temp <- createColony
temp
temp <- createColony()
warnings()
rnorm(1,0,1)
temp <- matrix(NA, nrow=5,ncol=4)
temp[1][1]
temp[1][4]
temp[1][1] <- rnorm(1,0,1)
temp
temp <- createColony(1,1)
temp
temp <- createColony(2,2)
temp <- createColony(2,1)
temp
temp <- createColony(1,2)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
temp <- createColony(3,3)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
temp <- createColony(3,3)
rm(colony)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
temp <- createColony(3,3)
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
rm(list = ls())
source('~/GitHub/R-Projects/ESS/Colony.R', echo=TRUE)
createCol(3,3)
rm(list = ls())
source('~/GitHub/R-Projects/ESS/ColSim.R', echo=TRUE)
createCol(3,3)
